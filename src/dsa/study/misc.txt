// ---------------REGEX---------------

/([A-Z])/g; // aLL Uppercase
/\s\s+/g; // all double spaces
/_/g; // underscore
/\s/g; // spaces

// Replace all Uppercase letters with space
replace(regEx, " $1");

// Replace all double spaces with one space
replace(regEx2, " ");

// Remove all underscores
replace(regEx3, "");

// Remove spaces before and after set of string
trim();

// Make every character lowercase
toLowerCase();

// Replace spaces with '-'
replace(regEx4, "-");

// Create a variable for the white space and underscores.
var regex = /\s+|_+/g;

// regex for consonants or cluster of consonants
const regEx = /^[b-df-hj-np-tv-z]+/g;

// Replace low-upper case to low-space-uppercase
str = str.replace(/([a-z])([A-Z])/g, "$1 $2");

// ---------------STRINGS---------------

// Splitting a word into characters
const string = "word";
// Option 1
string.split("");
// Option 2
[...string];
// Option 3
Array.from(string);
// Option 4
Object.assign([], string);
// Result:
// ['w', 'o', 'r', 'd']

// If you want to split your string by a specific character, then split is the way to go.
const string = "split-by-dash";
const usingSplit = string.split("-");
// [ 'split', 'by', 'dash' ]

/*

2) If you want to replace multiple characters you can call the String.prototype.replace() with the replacement argument being a function that gets called for each match. All you need is an object representing the character mapping which you will use in that function.

For example, if you want a replaced with x, b with y and c with z, you can do something like this:

var chars = {'a':'x','b':'y','c':'z'};
var s = '234abc567bbbbac';
s = s.replace(/[abc]/g, m => chars[m]);
console.log(s);


3)

*/





// ---------------OBJECTS---------------

// ---------------ARRAYS---------------

/*
1) REMOVE DUPLICATES FROM AN ARRAY USING SET

A Set is a collection of unique values. To remove duplicates from an array:
    First, convert an array of duplicates to a Set. The new Set will implicitly remove duplicate elements.
    Then, convert the set back to an array.
The following example uses a Set to remove duplicates from an array:

let chars = ['A', 'B', 'A', 'C', 'B'];
let uniqueChars = [...new Set(chars)];

console.log(uniqueChars);
Code language: JavaScript (javascript)

Output:

[ 'A', 'B', 'C' ]



2) LOOP THROUGH THE ARGUMENTS OBJECT

function uniteUnique(arr) {
    let mergedArr = [];
    for (let i = 0; i < arguments.length; i++) {
      mergedArr = mergedArr.concat(arguments[i]);



*/
